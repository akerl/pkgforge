#!/usr/bin/env ruby

require 'pkgforge'
require 'mercenary'

FILE_NAME = '.pkgforge'.freeze

def add_common_opts(cmd)
  cmd.option :directory, '-d DIR', '--directory DIR', 'Change to directory before loading'
  cmd.option :skipcleanup, '-s', '--skipcleanup', 'Skip cleanup of tmpdirs and tmpfiles'
  cmd.option :statefile, '--statefile FILE', 'State file to re-use build directories'
end

def get_file(options)
  options[:directory] ||= '.'
  Dir.chdir(options[:directory]) do
    raise("No #{FILE_NAME} file") unless File.exist? FILE_NAME
    forge = PkgForge.load_from_file
    yield forge
  end
end

def run(forge, skipcleanup, release = false, build = true)
  if build
    forge.build!
    forge.test!
    forge.package!
  end
  forge.push! if release
ensure
  forge.cleanup! unless skipcleanup
end

def run_with_state(forge, options, release = false)
  statefile = options[:statefile]
  forge.load_state!(statefile) if release
  run(forge, options[:skipcleanup] || !release, release, !release)
  forge.write_state!(statefile) unless release
end

def run_with_options(options, release = false)
  get_file(options) do |forge|
    return run(forge, options[:skipcleanup], release) unless options[:statefile]
    run_with_state(forge, options, release)
  end
end

# rubocop:disable Metrics/BlockLength
Mercenary.program(:pkgforge) do |p|
  p.version PkgForge::VERSION
  p.description 'DSL engine for building Arch packages'
  p.syntax 'pkgforge <subcommand> [options]'

  p.command(:build) do |c|
    c.syntax 'build [options]'
    c.description 'Build the package'
    add_common_opts(c)

    c.action do |_, options|
      run_with_options(options)
    end
  end

  p.command(:release) do |c|
    c.syntax 'release [options]'
    c.description 'Release the package'
    add_common_opts(c)

    c.action do |_, options|
      run_with_options(options, true)
    end
  end

  p.command(:info) do |c|
    c.syntax 'info [options]'
    c.description 'Print package info'
    add_common_opts(c)

    c.action do |_, options|
      get_file(options) do |forge|
        puts "name: #{forge.name}"
      end
    end
  end

  p.action do
    puts p
    exit 1
  end
end
# rubocop:enable Metrics/BlockLength
